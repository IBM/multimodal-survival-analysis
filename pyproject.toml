[tool.poetry]
name = "multimodal-survival"
version = "0.0.1"
description = "Multimodal models for survival analysis. Case study on CRC."
authors = ["Nikita Janakarajan <nja@zurich.ibm.com>"]
readme = "README.md"
packages = [{include = "multimodal_survival", from="src"}]
include = ["multimodal_survival/py.typed"]

[tool.poetry_bumpversion.file."src/multimodal_survival/__init__.py"]

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[tool.poetry.dependencies]
python = ">=3.9,<3.11"
tqdm = "^4.25.0"
scikit-learn = "1.3.0"
tensorflow = "2.15"

[tool.poetry.dev-dependencies]
jupyter = "^1.0.0"
mypy = "^1.0.0"
pytest = "^6.2.5"
pytest-cov = "^2.8.1"
ruff = "^0.1.3"
types-setuptools = "^57.4.14"

# For internal packages
# internal-package = { version = "^0.0.1", source = "internal_private" }

# For extras
# psycopg2 = { version = "^2.9", optional = true }
# mysqlclient = { version = "^1.3", optional = true }

# [tool.poetry.extras]
# mysql = ["mysqlclient"]
# pgsql = ["psycopg2"]
# databases = ["mysqlclient", "psycopg2"]
# more details here: https://python-poetry.org/docs/pyproject/#extras

[tool.poetry.scripts]
train-embeddings = "multimodal_survival.scripts.train_embeddings:main"
train-survival = "multimodal_survival.scripts.train_survival_analysis:main"
feature-importance = "multimodal_survival.scripts.feature_importance:main"
gsea-analysis = "multimodal_survival.scripts.gsea_analysis:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = [
    "tqdm.*",
]
ignore_missing_imports = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 100
indent-width = 4

target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
preview = true
select = [
    "E4", 
    "E7", 
    "E9", 
    "F", 
    "W291", 
    "W292", 
    "W505", 
    "E721",
    "I",
    "N801",
    "N802",
    # "N803",
    "N804",
    "N805",
    # "N806",
    "N816",
    # "D100",
    # "D101",
    # "D102",
    # "D103",
    "D104",
    # "D105",
    "D106",
    # "D107",
    "D300",
    "UP010",
    "UP011",
    "UP019",
    "UP032",
    # "ARG",
    # "PTH",
    "LOG001",
    "LOG002",
]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
preview = true
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
